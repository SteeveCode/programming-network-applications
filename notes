    How To Program A Network Application

     Create a server class.

The server class will contain two types of socket objects:
1. Server socket: holds a port in the operating system for our application
2. Client socket
# Create a new server socket object with the port number passed in as constructor argument.
# Declare a new client socket variable but don't initialize it.
# Call the accept() method of the server socket. This will return a client socket object which is passed to the client
socket variable above. Note, the accept() method is a blocking method i.e. java will stop reading line of code when it
gets to the accept() method and wait for an incoming connection to be accepted before continuing with the rest of the code
# Create input & output buffers. These are places where we store both data going out of our socket and data coming into
our socket. They take the following parameters:
Params:
in - A character-input stream
out – A character-output stream, & a boolean (autoFlush); if true, the println, printf, or format methods will flush
the output buffer. AutoFlush is necessary because the sender buffer by default will not push out data to the receiver buffer
if the size of the data does not fill up the buffer size.
# Send a message to the client using the socket writer object outSocket.println
# # Receive and store message from the client using the socket reader object inSocket.readLine.
# Call the close() method on the socket object after everything
Note:
1. Always add some print statement after calling any of the socket object method as a means of debugging
2. The server class should contain the main method below to launch the application:
public static void main(String[] args) {
      try{
          new Server();
      }catch (Exception e) {
          e.printStackTrace();

      }
    }

     Create a Client class.

# Create a new client socket object with the server ip address and port number passed in as constructor arguments. It
is important to note that the data type for the ip address is a string.
# Create input & output buffers. These are places where we store both data going out of our socket and data coming into
our socket. They take the following parameters:
Params:
in - A character-input stream
out – A character-output stream, & a boolean (autoFlush); if true, the println, printf, or format methods will flush
the output buffer. AutoFlush is necessary because the sender buffer by default will not push out data to the receiver buffer
if the size of the data does not fill up the buffer size.
# Send a message to the client using the socket writer object outSocket.println
# # Receive and store message from the client using the socket reader object inSocket.readLine.
# Call the close() method on the socket object after everything

    Multithreading

A thread is an instance of the same application. It is the same code but we just run them separately for each new client.
The goal is to enable several clients to talk to the server in parallel. This will be achieved by using threads.
To create a multithreaded program, you will require the following classes and their dependencies:
Custom server class
Custom Thread class
Custom client class

    Create a custom server main class.
# Initialize a new server socket object with the port number
# Display a message that port is open
# Run an infinite "while" loop that will handle new incoming connection
# Declare a client socket variable that will receive the incoming connection when the accept() method is called on the
server socket object
# Initialize a custom Thread class(server thread) that will accept the client socket as argument.
# Initialize a new Thread class from the java.lang package that will accept the custom thread object as argument.
# Call the Thread.start() method

Note:
The custom Thread class will hold all the code that defines the task needed by the server to interact with each client

    Create a custom Thread class.
# The custom thread class must implement the Runnable interface
# The class requires a client socket dependency
# Define the constructor method
# Override & implement the run() method from the Runnable interface with the codes that will interact with client socket




Note:
In Java, the Runnable interface is a part of the java.lang package and is used to define a contract for objects that
represent a task that can be executed concurrently by a thread. It's commonly used in scenarios where you want to
separate the task's logic from the thread's management. Classes that implement the Runnable interface are required to
provide an implementation for the run() abstract method, which contains the code that defines the task to be performed
when the thread is executed. This method represents the entry point for the thread's execution





